/*
2의 제곱수에 가장 먼 소수
1 ≤ maxK ≤ 10,000,000
1 ≤ collision ≤ 10
*/

#include<iostream>
#include<string>
using namespace std;

int getHashM(int maxK, int collision){
	int L = maxK/collision;
	if(L<=2) return 2;
	
	//범위값 구하기
	//nmin - 범위내 최소값 , nmax - 범위내 최대값, 
	int nmax = 1;
	int n = L;
	while(n>0){
		n = n/2;
		nmax *=2;        
	}
	int nmin=nmax/2;

	//소수찾기
	int ans =0;
	int result;
	
	int primecnt = 0;//소수 갯수
	int numcnt = nmax-nmin-1; //범위내 숫자 갯수
	int i = (nmin+nmax)/2;
	int cc= -1;
	int nnn = 1;

	//중간값부터 왼쪽 오른쪽으로 하나씩 확인
	while(numcnt > 0){
		bool check = 0;
		for(int j = 2; j <i; j++){
			if(i%j == 0){
				check = 1;
				break;
			}
		}
		if(check == 0){
			int now = i-nmin<nmax-i?i-nmin:nmax-i;
			if(now > ans){
				ans = now;
				result = i;
			}
			primecnt++;
			break;
		}
		i= i + nnn*cc;
		nnn += 1;
		cc  *= -1;
		numcnt--;
	}

	if(primecnt==0)return -1;
	return result;
}


int main(){
	cout << getHashM( 10,1);
	return 0;
}

